version: '3.8'

services:
  # UDM API Service
  udm-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SERVICE=udm
    container_name: railway-udm-api
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - UDM_PORT=4000
      - API_RATE_LIMIT=1000
      - LOG_LEVEL=info
      - ENABLE_METRICS=true
    volumes:
      - udm_logs:/app/logs
    networks:
      - railway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.udm-api.rule=Host(`udm-api.localhost`)"
      - "traefik.http.services.udm-api.loadbalancer.server.port=4000"

  # TMS API Service  
  tms-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SERVICE=tms
    container_name: railway-tms-api
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - TMS_PORT=5000
      - API_RATE_LIMIT=1000
      - LOG_LEVEL=info
      - ENABLE_METRICS=true
    volumes:
      - tms_logs:/app/logs
    networks:
      - railway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tms-api.rule=Host(`tms-api.localhost`)"
      - "traefik.http.services.tms-api.loadbalancer.server.port=5000"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: railway-integration-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - railway-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: railway-integration-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - railway-network
    depends_on:
      - udm-api
      - tms-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: railway-integration-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - railway-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  udm_logs:
    driver: local
  tms_logs:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local

networks:
  railway-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
